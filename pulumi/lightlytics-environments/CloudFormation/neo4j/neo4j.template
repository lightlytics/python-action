{
  "Description": "Neo4j on AWS - creates a variable number of EC2 Ubuntu machines, a VPC, elastic IP addresses, and deploys the Neo4j Graph Database cluster on it.  **WARNING** This template creates an Amazon EC2 instance. You will be billed for the AWS resources used if you create a stack from this template.",
  "AWSTemplateFormatVersion": "2010-09-09",
  "Mappings": {
    "AWSRegionArch2AMI": {
      "ap-northeast-1": {
        "64": "ami-05400d9964490e680"
      },
      "ap-northeast-2": {
        "64": "ami-021009a97c0db5ccd"
      },
      "ap-south-1": {
        "64": "ami-06c2e27faec80ae98"
      },
      "ap-southeast-1": {
        "64": "ami-0045fdd94d4e56390"
      },
      "ap-southeast-2": {
        "64": "ami-0002f6dd754202c19"
      },
      "eu-central-1": {
        "64": "ami-0f09938abddcc84d9"
      },
      "eu-west-1": {
        "64": "ami-0ba1ae9b541c272a9"
      },
      "eu-west-3": {
        "64": "ami-00e21456408089dea"
      },
      "us-gov-west-1": {
        "64": "ami-015e5e694f570dd81"
      },
      "us-gov-east-1": {
        "64": "ami-07a80b0fe49dac234"
      },
      "sa-east-1": {
        "64": "ami-0a63bef5be79aaafd"
      },
      "us-east-1": {
        "64": "ami-06da0fb19aeeb4d87"
      },
      "us-east-2": {
        "64": "ami-04bacd5c581e04851"
      },
      "us-west-1": {
        "64": "ami-05ebe550029cf4240"
      },
      "us-west-2": {
        "64": "ami-010991575a9f03c9b"
      },
      "ca-central-1": {
        "64": "ami-0510c53234ef0b565"
      },
      "eu-west-2": {
        "64": "ami-000e3d2da4b4b0c1c"
      },
      "eu-north-1": {
        "64": "ami-0e800d57fb744cc7a"
      },
      "ap-east-1": {
        "64": "ami-0a081aec66c8aa905"
      },
      "af-south-1": {
        "64": "ami-0a75e5f102b824853"
      },
      "eu-south-1": {
        "64": "ami-053c458bd44a2d289"
      }
    }
  },
  "Parameters": {
    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "r4.large",
      "AllowedValues": [
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m4.16xlarge",
        "m5.large",
        "m5.xlarge",
        "m5.2xlarge",
        "m5.4xlarge",
        "m5.12xlarge",
        "m5.24xlarge",
        "t2.medium",
        "t2.large",
        "t2.xlarge",
        "t2.2xlarge",
        "t3.medium",
        "t3.large",
        "t3.xlarge",
        "t3.2xlarge",
        "x1e.32xlarge",
        "x1e.16xlarge",
        "x1e.8xlarge",
        "x1e.4xlarge",
        "x1e.2xlarge",
        "x1e.xlarge",
        "x1.16xlarge",
        "r4.large",
        "r4.xlarge",
        "r4.2xlarge",
        "r4.4xlarge",
        "r4.8xlarge",
        "r4.16xlarge",
        "r5.large",
        "r5.xlarge",
        "r5.2xlarge",
        "r5.4xlarge",
        "r5.8xlarge",
        "r5.12xlarge",
        "r5.16xlarge"
      ],
      "ConstraintDescription": "Must be a valid EC2 instance type."
    },
    "SSHKeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "AllowedPattern": ".+"
    },
    "BastionSecurityGroupID": {
      "Description": "ID of the Bastion Security Group (e.g., sg-7f16e910)",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "EksSecurityGroupID": {
      "Description": "ID of the EKS Security Group (e.g., sg-7f16e910)",
      "Type": "AWS::EC2::SecurityGroup::Id"
    },
    "VPC": {
      "Type": "AWS::EC2::VPC::Id",
      "Default": "VPC"
    },
    "PrimaryNodeSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet-ID the existing subnet in your VPC where you want to deploy Primary node(s)."
    },
    "SecondaryNodeSubnet": {
      "Type": "AWS::EC2::Subnet::Id",
      "Description": "Subnet-ID the existing subnet in your VPC where you want to deploy Secondary node(s)."
    },
    "NetworkWhitelist": {
      "Description": " The IP address range that can be used to connect to Neo4j",
      "Type": "String",
      "MinLength": "0",
      "MaxLength": "18",
      "Default": "",
      "AllowedPattern": "[\\d\\./]*",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.  For example, 0.0.0.0/0 for open internet access."
    },
    "Password": {
      "NoEcho": true,
      "Description": "initial neo4j password (uppercase, lowercase, and numbers only)",
      "Type": "String",
      "MinLength": 8,
      "MaxLength": 40,
      "AllowedPattern": "^[a-zA-Z0-9\\.-]+$"
    },
    "VolumeType": {
      "Description": "What kind of storage to attach",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": [
        "gp2",
        "st1"
      ]
    },
    "EncryptDataVolume": {
      "Description": "Should EBS storage be encrypted?  Default is yes.",
      "Type": "String",
      "Default": "true",
      "AllowedValues": [
        "true",
        "false"
      ]
    },
    "VolumeSizeGB": {
      "Description": "How much EBS storage is allocated to each cluster node, in GiB",
      "Type": "Number",
      "Default": "100",
      "MinValue": "10",
      "MaxValue": "1000",
      "ConstraintDescription": "Must be a valid EBS disk size in GiB."
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [
        {
          "Label": {
            "default": "Amazon EC2 Configuration"
          },
          "Parameters": [
            "InstanceType",
            "VolumeType",
            "VolumeSizeGB",
            "EncryptDataVolume"
          ]
        },
        {
          "Label": {
            "default": "Access Control"
          },
          "Parameters": [
            "SSHKeyName",
            "NetworkWhitelist",
            "Password"
          ]
        }
      ]
    }
  },
  "Resources": {
    "DNSZone": {
      "Type": "AWS::Route53::HostedZone",
      "Properties": {
        "HostedZoneConfig": {
          "Comment": "Zone to define private DNS for neo4j nodes"
        },
        "Name": "neo4j",
        "VPCs": [
          {
            "VPCId": {
              "Ref": "VPC"
            },
            "VPCRegion": {
              "Ref": "AWS::Region"
            }
          }
        ],
        "HostedZoneTags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "Neo4jPrivateZone",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "ReadOwnTags": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "work-with-tags",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        },
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "root",
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:CreateTags",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "ec2:Describe*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "elasticloadbalancing:Describe*",
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "cloudwatch:ListMetrics",
                    "cloudwatch:GetMetricStatistics",
                    "cloudwatch:Describe*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": "autoscaling:Describe*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "instProfNeo4jEnterprise": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Roles": [
          {
            "Ref": "ReadOwnTags"
          }
        ],
        "InstanceProfileName": {
          "Fn::Join": [
            "-",
            [
              "read-own-tags-ip",
              {
                "Ref": "AWS::StackName"
              }
            ]
          ]
        }
      }
    },
    "sgNeo4jEnterprise": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Neo4j Ports",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "5000",
            "ToPort": "5000",
            "CidrIp": "10.0.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "6000",
            "ToPort": "6000",
            "CidrIp": "10.0.0.0/16"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7000",
            "ToPort": "7000",
            "CidrIp": "10.0.0.0/16"
          },
          {
            "IpProtocol": -1,
            "SourceSecurityGroupId": {
              "Ref": "BastionSecurityGroupID"
            }
          },
          {
            "IpProtocol": -1,
            "SourceSecurityGroupId": {
              "Ref": "EksSecurityGroupID"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7687",
            "ToPort": "7687",
            "CidrIp": {
              "Ref": "NetworkWhitelist"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7688",
            "ToPort": "7688",
            "CidrIp": {
              "Ref": "NetworkWhitelist"
            }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "7473",
            "ToPort": "7473",
            "CidrIp": {
              "Ref": "NetworkWhitelist"
            }
          }
        ]
      }
    },
    "Neo4jServer0DNS": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "DNSZone",
      "Properties": {
        "HostedZoneId": {
          "Ref": "DNSZone"
        },
        "Comment": "DNS names for neo4j node 0.",
        "Name": "node0.neo4j.",
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "Neo4jServer0",
              "PrivateIp"
            ]
          }
        ]
      }
    },
    "Neo4jServer0": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "instProfNeo4jEnterprise"
        },
        "DisableApiTermination": "FALSE",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "GroupSet": [
              {
                "Ref": "sgNeo4jEnterprise"
              }
            ],
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PrimaryNodeSubnet"
            }
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "neo4j-CORE-vm-0",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "neo4j_mode",
            "Value": "cluster"
          },
          {
            "Key": "node_name",
            "Value": "node0.neo4j"
          },
          {
            "Key": "dbms_mode",
            "Value": "CORE"
          },
          {
            "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
            "Value": "3"
          },
          {
            "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
            "Value": "3"
          },
          {
            "Key": "causal_clustering_initial_discovery_members",
            "Value": {
              "Fn::Join": [
                ",",
                [
                  "node0.neo4j:5000",
                  "node1.neo4j:5000",
                  "node2.neo4j:5000"
                ]
              ]
            }
          },
          {
            "Key": "initial_password",
            "Value": {
              "Ref": "Password"
            }
          },
          {
            "Key": "InstanceID",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "0"
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "#\n",
                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                "LOGFILE=/home/ubuntu/setup.log\n",
                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                "\n",
                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                "export API=http://169.254.169.254/latest/\n",
                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                "aws ec2 describe-tags --region $EC2_REGION --filter \"Name=resource-id,Values=$EC2_INSTANCE_ID\" 'Name=key,Values=node_name'  --output=json | jq -r .Tags[0].Value > /etc/hostname \n",
                "hostnamectl set-hostname $(aws ec2 describe-tags --region $EC2_REGION --filter \"Name=resource-id,Values=$EC2_INSTANCE_ID\" 'Name=key,Values=node_name'  --output=json | jq -r .Tags[0].Value ) \n",
                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                "env | tee -a $LOGFILE\n",
                "# Tag volumes, which CloudFormation does not allow\n",
                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                "# Format EBS storage, and mount it in Neo4j directory\n",
                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                "mount -a 2>&1 | tee -a $LOGFILE\n",
                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                "/usr/bin/neo4j-admin set-initial-password ",
                {
                  "Ref": "Password"
                },
                " \n",
                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                "\n",
                "sudo apt-get update\n",
                "mkdir aws-cfn-bootstrap-latest\n",
                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                "python /usr/lib/python2.7/dist-packages/easy_install.py aws-cfn-bootstrap-latest\n",
                "\n",
                "echo Stack ID '",
                {
                  "Ref": "AWS::StackId"
                },
                "' | tee -a $LOGFILE\n",
                "export STACK_TOKEN=$(echo '",
                {
                  "Ref": "AWS::StackId"
                },
                "' | base64 | tail -c 12)\n",
                "# Loop waiting for neo4j service to start.\n",
                "while true; do\n",
                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                "        break\n",
                "    fi\n",
                "\n",
                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                "    sleep 1\n",
                "done\n",
                "\n",
                "echo Signaling stack success | tee -a $LOGFILE\n",
                "/usr/local/bin/cfn-signal --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " \\\n",
                "       --id $EC2_INSTANCE_ID \\\n",
                "       --region ",
                {
                  "Ref": "AWS::Region"
                },
                " \\\n",
                "       --success true -d \"$STACK_TOKEN\" '",
                {
                  "Ref": "StackTokenWaitHandle"
                },
                "' 2>&1 | tee -a $LOGFILE \n"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": {
                "Ref": "VolumeType"
              },
              "VolumeSize": "10",
              "DeleteOnTermination": "true"
            }
          },
          {
            "DeviceName": "/dev/sdb",
            "Ebs": {
              "VolumeType": {
                "Ref": "VolumeType"
              },
              "VolumeSize": {
                "Ref": "VolumeSizeGB"
              },
              "Encrypted": {
                "Ref": "EncryptDataVolume"
              }
            }
          }
        ]
      }
    },
    "Neo4jServer1DNS": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "DNSZone",
      "Properties": {
        "HostedZoneId": {
          "Ref": "DNSZone"
        },
        "Comment": "DNS names for neo4j node 1.",
        "Name": "node1.neo4j.",
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "Neo4jServer1",
              "PrivateIp"
            ]
          }
        ]
      }
    },
    "Neo4jServer1": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "instProfNeo4jEnterprise"
        },
        "DisableApiTermination": "FALSE",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "GroupSet": [
              {
                "Ref": "sgNeo4jEnterprise"
              }
            ],
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "SecondaryNodeSubnet"
            }
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "neo4j-CORE-vm-1",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "neo4j_mode",
            "Value": "cluster"
          },
          {
            "Key": "node_name",
            "Value": "node1.neo4j"
          },
          {
            "Key": "dbms_mode",
            "Value": "CORE"
          },
          {
            "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
            "Value": "3"
          },
          {
            "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
            "Value": "3"
          },
          {
            "Key": "causal_clustering_initial_discovery_members",
            "Value": {
              "Fn::Join": [
                ",",
                [
                  "node0.neo4j:5000",
                  "node1.neo4j:5000",
                  "node2.neo4j:5000"
                ]
              ]
            }
          },
          {
            "Key": "initial_password",
            "Value": {
              "Ref": "Password"
            }
          },
          {
            "Key": "InstanceID",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "1"
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "#\n",
                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                "LOGFILE=/home/ubuntu/setup.log\n",
                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                "\n",
                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                "export API=http://169.254.169.254/latest/\n",
                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                "aws ec2 describe-tags --region $EC2_REGION --filter \"Name=resource-id,Values=$EC2_INSTANCE_ID\" 'Name=key,Values=node_name'  --output=json | jq -r .Tags[0].Value > /etc/hostname \n",
                "hostnamectl set-hostname $(aws ec2 describe-tags --region $EC2_REGION --filter \"Name=resource-id,Values=$EC2_INSTANCE_ID\" 'Name=key,Values=node_name'  --output=json | jq -r .Tags[0].Value ) \n",
                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                "env | tee -a $LOGFILE\n",
                "# Tag volumes, which CloudFormation does not allow\n",
                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                "# Format EBS storage, and mount it in Neo4j directory\n",
                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                "mount -a 2>&1 | tee -a $LOGFILE\n",
                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                "/usr/bin/neo4j-admin set-initial-password ",
                {
                  "Ref": "Password"
                },
                " \n",
                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                "\n",
                "sudo apt-get update\n",
                "mkdir aws-cfn-bootstrap-latest\n",
                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                "python /usr/lib/python2.7/dist-packages/easy_install.py aws-cfn-bootstrap-latest\n",
                "\n",
                "echo Stack ID '",
                {
                  "Ref": "AWS::StackId"
                },
                "' | tee -a $LOGFILE\n",
                "export STACK_TOKEN=$(echo '",
                {
                  "Ref": "AWS::StackId"
                },
                "' | base64 | tail -c 12)\n",
                "# Loop waiting for neo4j service to start.\n",
                "while true; do\n",
                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                "        break\n",
                "    fi\n",
                "\n",
                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                "    sleep 1\n",
                "done\n",
                "\n",
                "echo Signaling stack success | tee -a $LOGFILE\n",
                "/usr/local/bin/cfn-signal --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " \\\n",
                "       --id $EC2_INSTANCE_ID \\\n",
                "       --region ",
                {
                  "Ref": "AWS::Region"
                },
                " \\\n",
                "       --success true -d \"$STACK_TOKEN\" '",
                {
                  "Ref": "StackTokenWaitHandle"
                },
                "' 2>&1 | tee -a $LOGFILE \n"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": {
                "Ref": "VolumeType"
              },
              "VolumeSize": "10",
              "DeleteOnTermination": "true"
            }
          },
          {
            "DeviceName": "/dev/sdb",
            "Ebs": {
              "VolumeType": {
                "Ref": "VolumeType"
              },
              "VolumeSize": {
                "Ref": "VolumeSizeGB"
              },
              "Encrypted": {
                "Ref": "EncryptDataVolume"
              }
            }
          }
        ]
      }
    },
    "Neo4jServer2DNS": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "DNSZone",
      "Properties": {
        "HostedZoneId": {
          "Ref": "DNSZone"
        },
        "Comment": "DNS names for neo4j node 2.",
        "Name": "node2.neo4j.",
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "Neo4jServer2",
              "PrivateIp"
            ]
          }
        ]
      }
    },
    "Neo4jServer2": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "instProfNeo4jEnterprise"
        },
        "DisableApiTermination": "FALSE",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "GroupSet": [
              {
                "Ref": "sgNeo4jEnterprise"
              }
            ],
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "SecondaryNodeSubnet"
            }
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "neo4j-CORE-vm-2",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "neo4j_mode",
            "Value": "cluster"
          },
          {
            "Key": "node_name",
            "Value": "node2.neo4j"
          },
          {
            "Key": "dbms_mode",
            "Value": "CORE"
          },
          {
            "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
            "Value": "3"
          },
          {
            "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
            "Value": "3"
          },
          {
            "Key": "causal_clustering_initial_discovery_members",
            "Value": {
              "Fn::Join": [
                ",",
                [
                  "node0.neo4j:5000",
                  "node1.neo4j:5000",
                  "node2.neo4j:5000"
                ]
              ]
            }
          },
          {
            "Key": "initial_password",
            "Value": {
              "Ref": "Password"
            }
          },
          {
            "Key": "InstanceID",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "2"
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "#\n",
                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                "LOGFILE=/home/ubuntu/setup.log\n",
                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                "\n",
                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                "export API=http://169.254.169.254/latest/\n",
                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                "aws ec2 describe-tags --region $EC2_REGION --filter \"Name=resource-id,Values=$EC2_INSTANCE_ID\" 'Name=key,Values=node_name'  --output=json | jq -r .Tags[0].Value > /etc/hostname \n",
                "hostnamectl set-hostname $(aws ec2 describe-tags --region $EC2_REGION --filter \"Name=resource-id,Values=$EC2_INSTANCE_ID\" 'Name=key,Values=node_name'  --output=json | jq -r .Tags[0].Value ) \n",
                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                "env | tee -a $LOGFILE\n",
                "# Tag volumes, which CloudFormation does not allow\n",
                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                "# Format EBS storage, and mount it in Neo4j directory\n",
                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                "mount -a 2>&1 | tee -a $LOGFILE\n",
                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                "/usr/bin/neo4j-admin set-initial-password ",
                {
                  "Ref": "Password"
                },
                " \n",
                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                "\n",
                "sudo apt-get update\n",
                "mkdir aws-cfn-bootstrap-latest\n",
                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                "python /usr/lib/python2.7/dist-packages/easy_install.py aws-cfn-bootstrap-latest\n",
                "\n",
                "echo Stack ID '",
                {
                  "Ref": "AWS::StackId"
                },
                "' | tee -a $LOGFILE\n",
                "export STACK_TOKEN=$(echo '",
                {
                  "Ref": "AWS::StackId"
                },
                "' | base64 | tail -c 12)\n",
                "# Loop waiting for neo4j service to start.\n",
                "while true; do\n",
                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                "        break\n",
                "    fi\n",
                "\n",
                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                "    sleep 1\n",
                "done\n",
                "\n",
                "echo Signaling stack success | tee -a $LOGFILE\n",
                "/usr/local/bin/cfn-signal --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " \\\n",
                "       --id $EC2_INSTANCE_ID \\\n",
                "       --region ",
                {
                  "Ref": "AWS::Region"
                },
                " \\\n",
                "       --success true -d \"$STACK_TOKEN\" '",
                {
                  "Ref": "StackTokenWaitHandle"
                },
                "' 2>&1 | tee -a $LOGFILE \n"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": {
                "Ref": "VolumeType"
              },
              "VolumeSize": "10",
              "DeleteOnTermination": "true"
            }
          },
          {
            "DeviceName": "/dev/sdb",
            "Ebs": {
              "VolumeType": {
                "Ref": "VolumeType"
              },
              "VolumeSize": {
                "Ref": "VolumeSizeGB"
              },
              "Encrypted": {
                "Ref": "EncryptDataVolume"
              }
            }
          }
        ]
      }
    },
    "Neo4jReplica0DNS": {
      "Type": "AWS::Route53::RecordSet",
      "DependsOn": "DNSZone",
      "Properties": {
        "HostedZoneId": {
          "Ref": "DNSZone"
        },
        "Comment": "DNS names for neo4j replica 0.",
        "Name": "replica0.neo4j.",
        "Type": "A",
        "TTL": "900",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "Neo4jReplica0",
              "PrivateIp"
            ]
          }
        ]
      }
    },
    "Neo4jReplica0": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "IamInstanceProfile": {
          "Ref": "instProfNeo4jEnterprise"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "DisableApiTermination": "FALSE",
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            {
              "Ref": "AWS::Region"
            },
            "64"
          ]
        },
        "NetworkInterfaces": [
          {
            "AssociatePublicIpAddress": "false",
            "GroupSet": [
              {
                "Ref": "sgNeo4jEnterprise"
              }
            ],
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PrimaryNodeSubnet"
            }
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "KeyName": {
          "Ref": "SSHKeyName"
        },
        "Monitoring": "false",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  "neo4j-READ_REPLICA-vm-0",
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }
          },
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "neo4j_mode",
            "Value": "cluster"
          },
          {
            "Key": "node_name",
            "Value": "replica0.neo4j"
          },
          {
            "Key": "dbms_mode",
            "Value": "READ_REPLICA"
          },
          {
            "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
            "Value": "3"
          },
          {
            "Key": "causal_clustering_minimum_core_cluster_size_at_formation",
            "Value": "3"
          },
          {
            "Key": "causal_clustering_initial_discovery_members",
            "Value": {
              "Fn::Join": [
                ",",
                [
                  "node0.neo4j:5000",
                  "node1.neo4j:5000",
                  "node2.neo4j:5000"
                ]
              ]
            }
          },
          {
            "Key": "initial_password",
            "Value": {
              "Ref": "Password"
            }
          },
          {
            "Key": "InstanceID",
            "Value": {
              "Fn::Join": [
                "",
                [
                  {
                    "Ref": "AWS::StackName"
                  },
                  "0"
                ]
              ]
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "#\n",
                "# This script starts at the launch of a VM, and handles final cluster coordination.\n",
                "sudo /bin/rm -f /etc/neo4j/password-reset.log\n",
                "LOGFILE=/home/ubuntu/setup.log\n",
                "echo `date` 'Preparing Causal Cluster' | tee -a $LOGFILE\n",
                "\n",
                "/bin/systemctl stop neo4j.service 2>&1 | tee -a $LOGFILE\n",
                "export API=http://169.254.169.254/latest/\n",
                "export EC2_AVAIL_ZONE=$(curl --silent $API/meta-data/placement/availability-zone)\n",
                "export EC2_INSTANCE_ID=$(curl -s $API/meta-data/instance-id)\n",
                "export EC2_REGION=$(curl -s $API/dynamic/instance-identity/document | jq -r .region)\n",
                "aws ec2 describe-tags --region $EC2_REGION --filter \"Name=resource-id,Values=$EC2_INSTANCE_ID\" 'Name=key,Values=node_name'  --output=json | jq -r .Tags[0].Value > /etc/hostname \n",
                "hostnamectl set-hostname $(aws ec2 describe-tags --region $EC2_REGION --filter \"Name=resource-id,Values=$EC2_INSTANCE_ID\" 'Name=key,Values=node_name'  --output=json | jq -r .Tags[0].Value ) \n",
                "export ROOT_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sda1 --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                "export DATA_DISK_ID=$(aws ec2 describe-volumes --filters Name=attachment.instance-id,Values=${EC2_INSTANCE_ID} Name=attachment.device,Values=/dev/sdb --query 'Volumes[*].[VolumeId]' --region=${EC2_REGION} --out text | cut -f 1)\n",
                "env | tee -a $LOGFILE\n",
                "# Tag volumes, which CloudFormation does not allow\n",
                "# Root volume: /dev/sda, data volume /dev/sdb\n",
                "aws ec2 create-tags --resources $ROOT_DISK_ID --tags Key=Name,Value=\"Root Neo4j Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                "aws ec2 create-tags --resources $DATA_DISK_ID --tags Key=Name,Value=\"Neo4j Data Vol for $EC2_INSTANCE_ID\" --region ${EC2_REGION} 2>&1 | tee -a $LOGFILE\n",
                "# Format EBS storage, and mount it in Neo4j directory\n",
                "echo `date` 'Preparing neo4j volume...' | tee -a $LOGFILE\n",
                "mkfs -t ext4 /dev/xvdb 2>&1 | tee -a $LOGFILE\n",
                "mkdir /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "mount /dev/xvdb /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                "cp --preserve=all -r /var/lib/neo4j/* /tmpmount/ 2>&1 | tee -a $LOGFILE\n",
                "umount /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "rm -rf /tmpmount 2>&1 | tee -a $LOGFILE\n",
                "echo `date` 'Remounting new volume in place...' | tee -a $LOGFILE\n",
                "mount /dev/xvdb /var/lib/neo4j 2>&1 | tee -a $LOGFILE\n",
                "FSTAB_ENTRY='/dev/xvdb /var/lib/neo4j ext4 defaults,discard 0 2'\n",
                "echo $FSTAB_ENTRY >> /etc/fstab\n",
                "mount -a 2>&1 | tee -a $LOGFILE\n",
                "echo `date` 'Preparing neo4j service...' | tee -a $LOGFILE\n",
                "/bin/rm -rf /var/lib/neo4j/data/databases/graph.db/ 2>&1 | tee -a $LOGFILE\n",
                "/usr/bin/neo4j-admin set-initial-password ",
                {
                  "Ref": "Password"
                },
                " \n",
                "/bin/systemctl start neo4j.service 2>&1 | tee -a $LOGFILE\n",
                "\n",
                "sudo apt-get update\n",
                "mkdir aws-cfn-bootstrap-latest\n",
                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                "python /usr/lib/python2.7/dist-packages/easy_install.py aws-cfn-bootstrap-latest\n",
                "\n",
                "echo Stack ID '",
                {
                  "Ref": "AWS::StackId"
                },
                "' | tee -a $LOGFILE\n",
                "export STACK_TOKEN=$(echo '",
                {
                  "Ref": "AWS::StackId"
                },
                "' | base64 | tail -c 12)\n",
                "# Loop waiting for neo4j service to start.\n",
                "while true; do\n",
                "    if curl -s -I http://localhost:7474 | grep '200 OK'; then\n",
                "        echo `date` 'Startup complete ' | tee -a $LOGFILE\n",
                "        break\n",
                "    fi\n",
                "\n",
                "    echo `date` 'Waiting for neo4j to come up' 2>&1 | tee -a $LOGFILE\n",
                "    sleep 1\n",
                "done\n",
                "\n",
                "echo Signaling stack success | tee -a $LOGFILE\n",
                "/usr/local/bin/cfn-signal --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                " \\\n",
                "       --id $EC2_INSTANCE_ID \\\n",
                "       --region ",
                {
                  "Ref": "AWS::Region"
                },
                " \\\n",
                "       --success true -d \"$STACK_TOKEN\" '",
                {
                  "Ref": "StackTokenWaitHandle"
                },
                "' 2>&1 | tee -a $LOGFILE \n"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeType": {
                "Ref": "VolumeType"
              },
              "VolumeSize": "10",
              "DeleteOnTermination": "true"
            }
          },
          {
            "DeviceName": "/dev/sdb",
            "Ebs": {
              "VolumeType": {
                "Ref": "VolumeType"
              },
              "VolumeSize": {
                "Ref": "VolumeSizeGB"
              },
              "Encrypted": {
                "Ref": "EncryptDataVolume"
              }
            }
          }
        ]
      }
    },
    "StackTokenWaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },
    "WaitOnPasswordReset": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "Neo4jServer0",
      "Properties": {
        "Handle": {
          "Ref": "StackTokenWaitHandle"
        },
        "Timeout": "2000",
        "Count": "1"
      }
    }
  },
  "Outputs": {
    "Node0Ip": {
      "Value": {
        "Fn::GetAtt": [
          "Neo4jServer0",
          "PrivateIp"
        ]
      }
    },
    "Node1Ip": {
      "Value": {
        "Fn::GetAtt": [
          "Neo4jServer1",
          "PrivateIp"
        ]
      }
    },
    "Node2Ip": {
      "Value": {
        "Fn::GetAtt": [
          "Neo4jServer2",
          "PrivateIp"
        ]
      }
    },
    "Replica0Ip": {
      "Value": {
        "Fn::GetAtt": [
          "Neo4jReplica0",
          "PrivateIp"
        ]
      }
    }
  }
}
